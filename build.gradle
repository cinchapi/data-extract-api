buildscript {
  repositories {
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
}

plugins {
  id 'java'
  id 'maven'
  id 'eclipse'
  id 'maven-publish'
}

publishing {
  repositories {
    maven {
      name = 'cloudsmith'
      def releasesRepoUrl = "https://api-g.cloudsmith.io/maven/cinchapi/platform/"
      def snapshotsRepoUrl = "https://api-g.cloudsmith.io/maven/cinchapi/platform-snapshots/"
      url = mavenVersion.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
      credentials {
        username = System.getenv('CLOUDSMITH_API_USER')
        password = System.getenv('CLOUDSMITH_API_KEY')
      }
    }
  }
  publications {
    maven(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      groupId group
      artifactId project.name
      version mavenVersion
    }
  }
}

// The project version is controlled externally by the "version.sh" script.
def getVersion = { ->
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine 'bash', 'version.sh'
    standardOutput = stdout
  }
  return stdout.toString().trim()
}

group = 'com.cinchapi'
version = getVersion()
// Drop the build component from version number and use that for
// publishing
ext.mavenVersion = version.split('\\.')
ext.mavenVersion[3] = ext.mavenVersion[3].replaceAll("[0-9]+-", "-")
ext.mavenVersion[3] = ext.mavenVersion[3].replaceAll("[0-9]+", "").trim()
ext.mavenVersion = ext.mavenVersion.join(".").replace(".-", "-").replaceAll('\\.$', "")

repositories {
  mavenCentral()
  maven {
    url 'https://oss.sonatype.org/content/repositories/snapshots/'
  }
  maven {
    url "https://dl.cloudsmith.io/public/cinchapi/open-source/maven/"
  }
  maven {
    url "https://dl.cloudsmith.io/public/cinchapi/open-source-snapshots/maven/"
  }
  maven {
    url "https://dl.cloudsmith.io/public/cinchapi/platform/maven/"
  }
  maven {
    url "https://dl.cloudsmith.io/public/cinchapi/platform-snapshots/maven/"
  }
  maven {
    url "https://dl.cloudsmith.io/public/cinchapi/3rdparty/maven/"
  }
  maven {
    url "https://dl.cloudsmith.io/public/cinchapi/enterprise/maven/"
    credentials {
      username = System.getenv('CLOUDSMITH_API_USER')
      password = System.getenv('CLOUDSMITH_API_KEY')
    }
  }
  maven {
    url "https://dl.cloudsmith.io/public/cinchapi/enterprise-snapshots/maven/"
    credentials {
      username = System.getenv('CLOUDSMITH_API_USER')
      password = System.getenv('CLOUDSMITH_API_KEY')
    }
  }
}

jar {
  manifest {
    attributes("Specificiation-Title": project.name, "Specificiation-Version": version, "Implementation-Version": version)
  }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task testJar(type: Jar, dependsOn: classes) {
  classifier = 'tests'
  from sourceSets.test.output
}

artifacts {
  archives sourcesJar
  archives testJar
  archives javadocJar
}

// Ensure that these transitive dependencies are excluded so we don't get version clashes
def exclusions = [[group : 'com.google.guava', module: 'guava']]
exclusions.each { exclusion ->
    configurations.compile.dependencies.all {
        if (name != exclusion.module || group != exclusion.group) {
            exclude group: exclusion.group, module: exclusion.module
        }
    }
}

dependencies {
  compile 'com.google.guava:guava:25.1-jre'
  compile group: 'com.cinchapi', name: 'accent4j', version: '1.5.3', changing:true
  compile 'org.apache.commons:commons-csv:1.6'

  testCompile 'junit:junit:4.11'
}
